#!/usr/bin/env python3
"""
Plot the silicon band structure generated by Quantum ESPRESSO.

Expected inputs:
  - analysis/Si/data/silicon.bands.dat.gnu  (from bands.x)
  - analysis/Si/logs/si_bands_post.txt      (for symmetry point abscissae)

The script emits analysis/Si/plots/si_band_structure.png.
"""

from __future__ import annotations

import pathlib
from dataclasses import dataclass
from typing import List, Sequence, Tuple

import matplotlib.pyplot as plt
import numpy as np

ROOT = pathlib.Path(__file__).resolve().parents[1]
DATA_FILE = ROOT / "analysis" / "Si" / "data" / "silicon.bands.dat.gnu"
LOG_FILE = ROOT / "analysis" / "Si" / "logs" / "si_bands_post.txt"
OUT_PNG = ROOT / "analysis" / "Si" / "plots" / "si_band_structure.png"


@dataclass
class BandCurve:
    k_path: np.ndarray
    energies: np.ndarray


def parse_band_file(path: pathlib.Path) -> List[BandCurve]:
    bands: List[BandCurve] = []
    buffer: List[Tuple[float, float]] = []

    with path.open("r", encoding="utf-8") as f:
        for line in f:
            stripped = line.strip()
            if not stripped:
                if buffer:
                    arr = np.array(buffer, dtype=float)
                    bands.append(BandCurve(arr[:, 0], arr[:, 1]))
                    buffer = []
                continue

            parts = stripped.split()
            if len(parts) < 2:
                continue
            buffer.append((float(parts[0]), float(parts[1])))

    if buffer:
        arr = np.array(buffer, dtype=float)
        bands.append(BandCurve(arr[:, 0], arr[:, 1]))

    return bands


def extract_symmetry_points(path: pathlib.Path) -> Sequence[Tuple[str, float]]:
    labels: List[Tuple[float, str]] = []
    order = ["Γ", "X", "W", "K", "Γ", "L"]

    with path.open("r", encoding="utf-8") as f:
        for line in f:
            if "high-symmetry point" not in line:
                continue
            segments = line.strip().split()
            # last token is the abscissa value
            try:
                k_abscissa = float(segments[-1])
            except ValueError:
                continue
            if len(labels) < len(order):
                labels.append((k_abscissa, order[len(labels)]))

    return labels


def main() -> None:
    if not DATA_FILE.exists():
        raise SystemExit(f"Band data not found: {DATA_FILE}")

    bands = parse_band_file(DATA_FILE)
    if not bands:
        raise SystemExit("No band curves parsed; aborting")

    sym_points = extract_symmetry_points(LOG_FILE)

    fig, ax = plt.subplots(figsize=(6, 6), dpi=150)

    for band in bands:
        ax.plot(band.k_path, band.energies, color="tab:blue", linewidth=1)

    # Highlight Fermi level at ~6.46 eV from SCF output
    fermi_level = 6.4576
    ax.axhline(fermi_level, color="tab:red", linestyle="--", linewidth=0.8)

    if sym_points:
        xticks, xticklabels = zip(*sym_points)
        ax.set_xticks(xticks)
        ax.set_xticklabels(xticklabels)
        for x in xticks[1:-1]:
            ax.axvline(x, color="0.8", linestyle="-", linewidth=0.6)

    x_min = min(float(b.k_path.min()) for b in bands)
    x_max = max(float(b.k_path.max()) for b in bands)
    ax.set_xlim(x_min, x_max)
    ax.set_ylabel("Energy (eV)")
    ax.set_title("Silicon band structure — QE 7.4.1 on Apple Silicon (M4)")
    ax.grid(alpha=0.2, which="both", axis="y")

    OUT_PNG.parent.mkdir(parents=True, exist_ok=True)
    fig.tight_layout()
    fig.savefig(OUT_PNG)
    plt.close(fig)


if __name__ == "__main__":
    main()
